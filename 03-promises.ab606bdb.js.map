{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SACA,MAAMC,EAAO,CACXC,gBAAiBC,SAASC,cAAc,sBACxCC,eAAgBF,SAASC,cAAc,qBACvCE,YAAaH,SAASC,cAAc,uBACpCG,QAASJ,SAASC,cAAc,SAChCI,wBAAyBL,SAASC,cAAc,WAGlD,SAASK,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAUtC,OATgB,IAAIC,SAAQ,CAACC,EAASC,KACpCC,YAAW,KACLN,EACFI,EAAQ,CAAEN,SAAUA,EAAUC,MAAOA,IAErCM,EAAO,CAAEP,SAAUA,EAAUC,MAAOA,GAAQ,GAE7CA,EAAM,G,CAVbV,EAAKO,wBAAwBW,MAAMC,OAAS,UAiD5CnB,EAAKM,QAAQc,iBAAiB,UAR9B,SAAuBC,GACrBA,EAAGC,iBAGKD,EAAGE,cA9Bb,SAAoBC,GAClB,MAAMC,EAASC,OAAO1B,EAAKK,YAAYsB,OACjCC,EAAQF,OAAO1B,EAAKC,gBAAgB0B,OACpCE,EAAOH,OAAO1B,EAAKI,eAAeuB,OACxC,IAAIG,EAAYD,EAChBC,EAAYF,EAEZ,IAAK,IAAIG,EAAI,EAAGA,EAAIN,EAAQM,IACVvB,EAAcuB,EAAI,EAAGD,GAElCE,MAAKC,IACJ,MAAMxB,SAAEA,EAAQC,MAAEA,GAAUuB,EAC5BC,EAAApC,GAASqC,OAAOC,QACd,uBAAqB3B,QAAiBC,MAAU,IAGnD2B,OAAMJ,IACL,MAAMxB,SAAEA,EAAQC,MAAEA,GAAUuB,EAC5BC,EAAApC,GAASqC,OAAOG,QACd,sBAAoB7B,QAAiBC,MAAU,IAGrDoB,GAAaD,C,CAUfU,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nconst refs = {\n  firstDelayInput: document.querySelector('.form [name=delay]'),\n  stepDelayInput: document.querySelector('.form [name=step]'),\n  amountInput: document.querySelector('.form [name=amount]'),\n  formRef: document.querySelector('.form'),\n  buttonFormCreatePromise: document.querySelector('button'),\n};\nrefs.buttonFormCreatePromise.style.cursor = 'pointer';\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position: position, delay: delay });\n      } else {\n        reject({ position: position, delay: delay });\n      }\n    }, delay);\n  });\n  return promise;\n}\n\nfunction doPromises(data) {\n  const amount = Number(refs.amountInput.value);\n  const delay = Number(refs.firstDelayInput.value);\n  const step = Number(refs.stepDelayInput.value);\n  let currDelay = step;\n  currDelay = delay;\n\n  for (let i = 0; i < amount; i++) {\n    const promise = createPromise(i + 1, currDelay);\n    promise\n      .then(data => {\n        const { position, delay } = data;\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(data => {\n        const { position, delay } = data;\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    currDelay += step;\n  }\n}\n\nfunction submitPromise(ev) {\n  ev.preventDefault();\n  const data = {\n    position: 1,\n    form: ev.currentTarget,\n  };\n  doPromises(data);\n}\nrefs.formRef.addEventListener('submit', submitPromise);\n// import Notiflix from 'notiflix';\n// refs = {\n//   firstDelayInput: document.querySelector('.form [name=delay]'),\n//   stepDelayInput: document.querySelector('.form [name=step]'),\n//   amountInput: document.querySelector('.form [name=amount]'),\n//   button: document.querySelector('button'),\n//   formRef: document.querySelector('.form'),\n// };\n\n// function createPromise(position, delay) {\n//   const timeOut = Number(refs.firstDelayInput.value);\n//   const timeInterval = Number(refs.stepDelayInput.value);\n//   const amount = Number(refs.amountInput.value);\n//   return new Promise((resolve, reject) => {\n//     setTimeout(() => {\n//       const shouldResolve = Math.random() > 0.3;\n//       if (shouldResolve) {\n//         resolve({ position, delay });\n//       } else {\n//         reject({ position, delay });\n//       }\n//     }, delay);\n//   });\n// }\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n// function submitButton(e) {\n//   e.preventDefault();\n// }\n// refs.button = addEventListener('submit', createPromise);\n// refs.formRef = addEventListener('submit', submitButton);\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$refs","firstDelayInput","document","querySelector","stepDelayInput","amountInput","formRef","buttonFormCreatePromise","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","style","cursor","addEventListener","ev","preventDefault","currentTarget","data1","amount","Number","value","delay1","step","currDelay","i","then","data","$parcel$interopDefault","Notify","success","catch","failure","$47d4ff9957288465$var$doPromises"],"version":3,"file":"03-promises.ab606bdb.js.map"}